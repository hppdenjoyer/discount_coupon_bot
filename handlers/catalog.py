from aiogram import Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import CATEGORIES
from models.user import get_user_profile, update_user_profile
import json
import logging
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def handle_catalog(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞."""
    await show_categories(message)

@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    await query.answer()
    await show_categories(query.message, edit=True)

async def show_categories(message: Message, edit: bool = False):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    builder = InlineKeyboardBuilder()

    for category_id, category_name in CATEGORIES.items():
        builder.button(
            text=category_name,
            callback_data=f"category_{category_id}"
        )
    builder.adjust(1)

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    if edit:
        await message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("category_"))
async def category_callback(query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    await query.answer()
    category_id = query.data.replace("category_", "")

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ JSON
        with open('data/products.json', 'r', encoding='utf-8') as file:
            products = json.load(file)

        category_products = products.get(category_id, [])
        if not category_products:
            await query.message.edit_text(
                "–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."
            )
            return

        builder = InlineKeyboardBuilder()
        products_text = f"üìã {CATEGORIES[category_id]}:\n\n"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∫—É–ø–∫–∏
        for product in category_products:
            products_text += (
                f"üè∑ {product['name']}\n"
                f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
                f"üìù {product['description']}\n\n"
            )
            builder.button(
                text=f"–ö—É–ø–∏—Ç—å {product['name']}",
                callback_data=f"buy_{product['id']}"
            )

        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_categories")
        builder.adjust(1)

        await query.message.edit_text(
            products_text,
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤."
        )

@router.callback_query(F.data.startswith("buy_"))
async def buy_product(query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞."""
    await query.answer()
    product_id = query.data.replace("buy_", "")

    try:
        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
        with open('data/products.json', 'r', encoding='utf-8') as file:
            products = json.load(file)

        product = None
        for category in products.values():
            for item in category:
                if item['id'] == product_id:
                    product = item
                    break
            if product:
                break

        if not product:
            await query.message.edit_text(
                "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardBuilder()
                .button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
                .as_markup()
            )
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
        confirmation_text = (
            f"üõç –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:\n\n"
            f"–¢–æ–≤–∞—Ä: {product['name']}\n"
            f"–¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?"
        )

        builder = InlineKeyboardBuilder()
        builder.button(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data=f"confirm_buy_{product_id}"
        )
        builder.button(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"category_{product['category']}"
        )
        builder.adjust(2)

        await query.message.edit_text(
            confirmation_text,
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏: {e}")
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
            .as_markup()
        )

@router.callback_query(F.data.startswith("confirm_buy_"))
async def confirm_buy_product(query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞."""
    await query.answer()
    product_id = query.data.replace("confirm_buy_", "")
    user_id = query.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = get_user_profile(user_id)

        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
        with open('data/products.json', 'r', encoding='utf-8') as file:
            products = json.load(file)

        product = None
        for category in products.values():
            for item in category:
                if item['id'] == product_id:
                    product = item
                    break
            if product:
                break

        if not product:
            await query.message.edit_text(
                "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                reply_markup=InlineKeyboardBuilder()
                .button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
                .as_markup()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if user_profile['balance'] < product['price']:
            await query.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {product['price']} —Ä—É–±.\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_profile['balance']} —Ä—É–±.\n\n"
                f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=InlineKeyboardBuilder()
                .button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
                .as_markup()
            )
            return

        # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        user_profile['balance'] -= product['price']
        user_profile['purchases_count'] += 1

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
        purchase = {
            'id': product_id,
            'name': product['name'],
            'price': product['price'],
            'date': datetime.now().strftime("%d.%m.%Y %H:%M")
        }
        user_profile['purchases'].append(purchase)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        update_user_profile(user_id, user_profile)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        success_message = (
            f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–¢–æ–≤–∞—Ä: {product['name']}\n"
            f"–¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
            f"–î–∞—Ç–∞: {purchase['date']}\n\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_profile['balance']} —Ä—É–±."
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
        builder.button(text="üë§ –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_purchases")
        builder.adjust(1)

        await query.message.edit_text(
            success_message,
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏: {e}")
        await query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
            .as_markup()
        )

def register_catalog_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞."""
    dp.include_router(router)