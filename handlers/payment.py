from aiogram import Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from models.user import get_user_profile, update_user_profile
import os
import logging
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data.startswith("payment_"))
async def process_payment(query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Payments."""
    await query.answer()
    amount = int(query.data.replace("payment_", ""))
    user_id = query.from_user.id

    try:
        provider_token = os.getenv('TELEGRAM_PAYMENT_TOKEN')
        logger.info(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –°—É–º–º–∞: {amount} –†–£–ë")

        if not provider_token:
            logger.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
            raise ValueError("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        prices = [LabeledPrice(label=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ({amount} ‚ÇΩ)", amount=amount * 100)]  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ payload —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        payload = f"balance_topup_{amount}_{timestamp}_{user_id}"

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—á–µ—Ç–∞ —Å payload: {payload}")

        await query.message.answer_invoice(
            title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} ‚ÇΩ",
            description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–æ—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—É–ø–æ–Ω–æ–≤ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏",
            payload=payload,
            provider_token=provider_token,
            currency="RUB",
            prices=prices,
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False,
            protect_content=True
        )

        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")

        await query.message.edit_text(
            "üí≥ –û–ø–ª–∞—Ç–∞\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–º –æ–∫–Ω–µ.",
            reply_markup=builder.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        if "Bad Request" in str(e):
            if "provider_token" in str(e).lower():
                error_message = "–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                logger.error("–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
            else:
                logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Bad Request: {str(e)}")

        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")

        await query.message.edit_text(
            error_message,
            reply_markup=builder.as_markup()
        )

@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ-—á–µ–∫–∞—É—Ç–∞."""
    await pre_checkout.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞."""
    payment = message.successful_payment
    amount = payment.total_amount / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ä—É–±–ª–∏
    user_id = message.from_user.id

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –°—É–º–º–∞: {amount} –†–£–ë, "
               f"Payload: {payment.invoice_payload}")

    try:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_profile = get_user_profile(user_id)
        previous_balance = user_profile['balance']
        user_profile['balance'] += amount
        update_user_profile(user_id, user_profile)

        logger.info(f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, "
                   f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π: {previous_balance} –†–£–ë, –ù–æ–≤—ã–π: {user_profile['balance']} –†–£–ë")

        await message.answer(
            f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
            f"–°—É–º–º–∞: {amount} ‚ÇΩ\n"
            f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å: {previous_balance} ‚ÇΩ\n"
            f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_profile['balance']} ‚ÇΩ"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, –û—à–∏–±–∫–∞: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞."
        )

def register_payment_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π."""
    dp.include_router(router)