from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
import json
import os
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [int(id) for id in os.getenv('ADMIN_IDS', '').split(',') if id]

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    return user_id in ADMIN_IDS

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin."""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–æ–Ω", callback_data="admin_add_coupon")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É–ø–æ–Ω", callback_data="admin_delete_coupon")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await query.answer()
    action = query.data.replace("admin_", "")

    if action == "add_coupon":
        context.user_data['admin_state'] = 'waiting_coupon_data'
        await query.message.edit_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫—É–ø–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–¶–µ–Ω–∞\n–û–ø–∏—Å–∞–Ω–∏–µ\n\n"
            "–ü—Ä–∏–º–µ—Ä:\nburgers\n–ë—É—Ä–≥–µ—Ä –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π\n299\n–í–∫—É—Å–Ω—ã–π –±—É—Ä–≥–µ—Ä —Å –∫–æ—Ç–ª–µ—Ç–æ–π"
        )
    
    elif action == "delete_coupon":
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—É–ø–æ–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        try:
            with open('data/products.json', 'r', encoding='utf-8') as f:
                products = json.load(f)
            
            keyboard = []
            for category, items in products.items():
                for item in items:
                    keyboard.append([InlineKeyboardButton(
                        f"‚ùå {item['name']} ({category})",
                        callback_data=f"delete_coupon_{item['id']}"
                    )])
            
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ø–æ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Error loading products: {e}")
            await query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫—É–ø–æ–Ω–æ–≤")
    
    elif action == "stats":
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        try:
            with open('data/products.json', 'r', encoding='utf-8') as f:
                products = json.load(f)
            with open('data/users.json', 'r', encoding='utf-8') as f:
                users = json.load(f)
            
            total_products = sum(len(cat) for cat in products.values())
            total_users = len(users)
            total_purchases = sum(user.get('purchases_count', 0) for user in users.values())
            
            stats_text = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
                f"–ö—É–ø–æ–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_products}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {total_purchases}"
            )
            
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]]
            await query.message.edit_text(
                stats_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logger.error(f"Error calculating stats: {e}")
            await query.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not is_admin(update.effective_user.id):
        return
    
    if context.user_data.get('admin_state') == 'waiting_coupon_data':
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∫—É–ø–æ–Ω–∞
            category, name, price, description = update.message.text.strip().split('\n')
            price = float(price)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –∫—É–ø–æ–Ω–∞
            from uuid import uuid4
            coupon_id = str(uuid4())[:8]
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—É–ø–æ–Ω–æ–≤
            products_file = Path('data/products.json')
            if products_file.exists():
                with open(products_file, 'r', encoding='utf-8') as f:
                    products = json.load(f)
            else:
                products = {}
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if category not in products:
                products[category] = []
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞
            new_coupon = {
                "id": coupon_id,
                "name": name,
                "price": price,
                "description": description,
                "category": category
            }
            products[category].append(new_coupon)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            with open(products_file, 'w', encoding='utf-8') as f:
                json.dump(products, f, ensure_ascii=False, indent=4)
            
            await update.message.reply_text(
                f"‚úÖ –ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"ID: {coupon_id}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
            )
            
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            context.user_data.pop('admin_state', None)
            
        except ValueError as e:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è\n–ù–∞–∑–≤–∞–Ω–∏–µ\n–¶–µ–Ω–∞\n–û–ø–∏—Å–∞–Ω–∏–µ"
            )
        except Exception as e:
            logger.error(f"Error adding coupon: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–∞")
